// Caso tenha variação usar essa linha
// 
// ,{"Variações da Função": "", "Parâmetros": "", "Protótipo": "", "Retorno": "", "Descrição": "", "Função": ""}
// 
// Caso não tenha variação usar essa linha:
// 
// ,{"Parâmetros": "", "Protótipo": "", "Retorno": "", "Descrição": "", "Função": ""}


{"Parâmetros": "void", "Protótipo": "bool loadTextureFromPixels32()", "Retorno": "True: Se obteve sucesso na criação, False: se houve algum erro.", "Descrição": "Cria uma textura a partir de pixels membros, deleta os pixels membros e reportar erro se não atingir sucesso. ", "Função": "loadTextureFromPixels32"}

{"Parâmetros": "Caminho para o arquivo e uma cor no sistema ARGB.", "Protótipo": " bool loadTextureFromFileWithColorKey( std::string path, GLubyte r, GLubyte g, GLubyte b, GLubyte a )", "Retorno": "True: se sucesso, False: se nao conseguir sucesso.", "Descrição": "Cria uma textura do arquivo fornecido e define uma cor no sistema ARGB para os pixels.", "Função": "loadTextureFromFileWithColorKey"}

{"Parâmetros": "matriz destino, a fonte de dados e o numero de bytes a copiar. ", "Protótipo": "void * memcpy ( void * destination, const void * source, size_t num )", "Retorno": "O destino .", "Descrição": "Recebe um destino, uma fonte e numero de bytes a copiar e faz uma copia direta da memoria da fonte para o destino .", "Função": "memcpy"}

{"Parâmetros": "Constantes do tipo GL.", "Protótipo": "void glEnable(GLenum)", "Retorno": "void", "Descrição": "Habilita algum recurso, a partir da constante GL passada.", "Função": "glEnable"}

{"Parâmetros": "Constantes do tipo GL.", "Protótipo": "void glDisable(GLenum)", "Retorno": "void", "Descrição": "Desabilita algum recurso do tipo GL.", "Função": "glDisable"}





