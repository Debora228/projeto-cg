// Caso tenha variação usar essa linha
// 
// ,{"Variações da Função": "", "Parâmetros": "", "Protótipo": "", "Retorno": "", "Descrição": "", "Função": ""}
// 
// Caso não tenha variação usar essa linha:
// 
// ,{"Parâmetros": "", "Protótipo": "", "Retorno": "", "Descrição": "", "Função": ""}





{"Parâmetros": "Uma textura que esteja desbloqueada", "Protótipo": "bool lock()", "Retorno": "True:Se os pixels de textura foram recuperados, False: se não foi possível recuperar", "Descrição": "Recebe uma textura, obtem os pixels de textura e retorna se foi possível recupera - los", "Função": "lock"}


{"Parâmetros": " Uma textura bloqueada ", "Protótipo": "bool unlock()", "Retorno": "True: Se os pixels de textura foram atualizados, False: se não foi possível", "Descrição": "Recebe uma textura bloqueada, tenta atualizar os pixels de textura e retorna se foi possível atualizar ou não.", "Função": "unlock"}

{"Parâmetros": "", "Protótipo": " *GLuint getPixelData32() ", "Retorno": "Um ponteiro para matriz de pixels", "Descrição": "Recebe o numero de linhas e colunas de pixels da imagem e retorna um ponteiro para matriz de pixels que podem representar uma paleta de cores no sistema RGB.", "Função": "getPixelData"}

{"Parâmetros": " Posição X na matriz de pixels, Posição Y na matriz de pixels. ", "Protótipo": " GLuint getPixel32( GLuint x, GLuint y ) ", "Retorno": "Retorna: Um valor no sistema ARGB. Retorna 0: Se as coordenadas estão fora dos limites da imagem. Retorna -1: Se o bitmap foi criado opaco e não-transparente", "Descrição": "Recebe a posição de um pixel e retorna um valor no sistema ARGB.", "Função": "getPixel32"}

{"Parâmetros": "Coordenadas do pixel e um valor de cor no sistema ARGB. ", "Protótipo": " void setPixel32 ( GLuint x, GLuint y, GLuint pixel ) ", "Retorno": "void.", "Descrição": "Define os valores de cor e transparência de um único pixel.", "Função": "setPixel32"}

{"Parâmetros": "Caminho para o arquivo .", "Protótipo": "bool loadPixelsFromFile( self, File )", "Retorno": "True: Se carregar com sucesso, False: Se não conseguir.", "Descrição": "Carrega os pixels do Arquivo e faz pads para obter duas dimensões.", "Função": "loadPixelsFromFile"}

{"Parâmetros": "void", "Protótipo": "bool loadTextureFromPixels32()", "Retorno": "True: Se obteve sucesso na criação, False: se houve algum erro.", "Descrição": "Cria uma textura a partir de pixels membros, deleta os pixels membros e reportar erro se não atingir sucesso. ", "Função": "loadTextureFromPixels32"}

{"Parâmetros": "Caminho para o arquivo e uma cor no sistema ARGB.", "Protótipo": " bool loadTextureFromFileWithColorKey( std::string path, GLubyte r, GLubyte g, GLubyte b, GLubyte a )", "Retorno": "True: se sucesso, False: se nao conseguir sucesso.", "Descrição": "Cria uma textura do arquivo fornecido e define uma cor no sistema ARGB para os pixels.", "Função": "loadTextureFromFileWithColorKey"}

{"Parâmetros": "matriz destino, a fonte de dados e o numero de bytes a copiar. ", "Protótipo": "void * memcpy ( void * destination, const void * source, size_t num )", "Retorno": "O destino .", "Descrição": "Recebe um destino, uma fonte e numero de bytes a copiar e faz uma copia direta da memoria da fonte para o destino .", "Função": "memcpy"}

{"Parâmetros": "Constantes do tipo GL.", "Protótipo": "void glEnable(GLenum)", "Retorno": "void", "Descrição": "Habilita algum recurso, a partir da constante GL passada.", "Função": "glEnable"}

{"Parâmetros": "Constantes do tipo GL.", "Protótipo": "void glDisable(GLenum)", "Retorno": "void", "Descrição": "Desabilita algum recurso do tipo GL.", "Função": "glDisable"}





