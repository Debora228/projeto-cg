################# DOCUMENTAÇÃO ###########################################################
#
# Autores: Levy Santiago, Matheus Almeida, Tulio campos, Adson Cardoso Jhonnathan Soares
#
# Projeto Computação Gráfica
#
##########################################################################################

###############################################################################################################################
# FUNÇÃO: initGL
# DESCRIÇÃO: Inicializa recursos de inicialização do OpenGL, como por exemplo, a definição da cor de limpeza.
# PARÂMETROS: Void
# RETORNO:  True (Se obteve sucesso);
#  		False (Se não obteve sucesso).
# PROTÓTIPO: bool initGL(void)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: render
# DESCRIÇÃO: Função onde serão renderizados todos os objetos que serão trabalhados.
# PARÂMETROS: Void
# RETORNO: Void
# PROTÓTIPO: void render(void)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: runMainLoop
# DESCRIÇÃO: Quando chamamos essa função, ele irá executar as funções do loop principal e definir uma chamada de volta para 
#		executar-se novamente. Quando o callback é executado, ele irá executar as funções de loop principal e chamar-se 
#		novamente em um 60 de segundo. Então, o que esse loop de retorno faz é garantir que as funções do loop principal sejam 
#		chamadas a cada 60º de segundo para nos dar uma taxa de quadros de 60 quadros por segundo.
# PARÂMETROS: Tempo de retorno (val).
# RETORNO: Void
# PROTÓTIPO: void runMainLoop(int val)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glMatrixMode
# DESCRIÇÃO: Especifica qual é a matriz atual.
# PARÂMETROS: Variável mode (Especifica qual pilha de matriz é o destino para operações de matriz subsequentes.) Valores aceitos:
#		GL_MODELVIEW, GL_PROJECTION e GL_TEXTURE. Sendo que o valor inicial é GL_MODELVIEW.
# RETORNO: Void
# PROTÓTIPO: void glMatrixMode(GLenum(mode))
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glLoadIdentity
# DESCRIÇÃO: Substitui a matriz atual pela matriz identidade.
# PARÂMETROS: Void
# RETORNO: Void
# PROTÓTIPO: void glLoadIdentity(void)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glClearColor
# DESCRIÇÃO: Especifica valores vermelho, verde, azul e alfa 
#		usados  para a inicialização do buffer de cores. 
#		Os valores iniciais são todos iguais a 0.
# PARÂMETROS: Variáveis red, green, blue e alpha.
# RETORNO: Void
# PROTÓTIPO: void glClearColor( GLfloat ( red ) , GLfloat ( green ) , GLfloat ( blue ) , GLfloat ( alpha ) )
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glGetError
# DESCRIÇÃO: Retorna uma intormação de erro. A cada erro detectado é atribuído um código numérico e um nome simbólico. Quando
#		ocorre um erro, o sinalizador de erro é definido para o valor de código de erro apropriado.
# PARÂMETROS: Void
# RETORNO: Valor da flag de erro do tipo GLenum.
# PROTÓTIPO:  GLenum glGetError(void)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glClear
# DESCRIÇÃO: Limpa os buffers para valores predefinidos por glClearDepth ou glClearStencil.
# PARÂMETROS: Máscaras (tipo GLbitfield) que indicam os buffers a serem limpos. As três máscaras são: GL_COLOR_BUFFER_BIT, 
#		GL_DEPTH_BUFFER_BIT e GL_STENCIL_BUFFER_BIT.
# RETORNO: Void
# PROTÓTIPO: void glClear(GLbitfield mask)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glBegin
# DESCRIÇÃO: Delimita os vértices de um tipo primitivo ou um grupo de tipos primitivos.
# PARÂMETROS: Variável mode (Especifica os tipos primitivos que serão criados a partir dos vértices presentes entre o glBegin e
#		o subsequente glEnd) Constantes aceitas: GL_POINTS, GL_LINES, GL_LINE_STRIP, GL_LINE_LOOP, GL_TRIANGLES, 
#		GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_QUADS, GL_QUAD_STRIP e GL_POLYGON.
# RETORNO: Void
# PROTÓTIPO: void glBegin(GLenum(mode))
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glVertex
# DESCRIÇÃO: Especifica um vértice.
# PARÂMETROS: Coordenadas x,y,z e w do vértice. Nem todos os parâmetros estão presentes em todas as formas do comando.
# RETORNO: Void
# PROTÓTIPOS:   void glVertex(* args)
#		Formas do comando:
#		void  glVertex2d( GLdouble ( x ) , GLdouble ( y ) )
#		void  glVertex2dv( const GLdouble * ( v ) )
#		void  glVertex2f( GLfloat ( x ) , GLfloat ( y ) )
#		void  glVertex2fv( const GLfloat * ( v ) )
#		void  glVertex2i( GLint ( x ) , GLint ( y ) )
#		void  glVertex2iv( const GLint * ( v ) )
#		void  glVertex2s( GLshort ( x ) , GLshort ( y ) )
#		void  glVertex2sv( const GLshort * ( v ) )
#		void  glVertex3d( GLdouble ( x ) , GLdouble ( y ) , GLdouble ( z ) )
#		void  glVertex3dv( const GLdouble * ( v ) )
#		void  glVertex3f( GLfloat ( x ) , GLfloat ( y ) , GLfloat ( z ) )
#		void  glVertex3fv( const GLfloat * ( v ) )
#		void  glVertex3i( GLint ( x ) , GLint ( y ) , GLint ( z ) )
#		void  glVertex3iv( const GLint * ( v ) )
#		void  glVertex3s( GLshort ( x ) , GLshort ( y ) , GLshort ( z ) )
#		void  glVertex3sv( const GLshort * ( v ) )
#		void  glVertex4d( GLdouble ( x ) , GLdouble ( y ) , GLdouble ( z ) , GLdouble ( w ) )
#		void  glVertex4dv( const GLdouble * ( v ) )
#		void  glVertex4f( GLfloat ( x ) , GLfloat ( y ) , GLfloat ( z ) , GLfloat ( w ) )
#		void  glVertex4fv( const GLfloat * ( v ) )
#		void  glVertex4i( GLint ( x ) , GLint ( y ) , GLint ( z ) , GLint ( w ) )
#		void  glVertex4iv( const GLint * ( v ) )
#		void  glVertex4s( GLshort ( x ) , GLshort ( y ) , GLshort ( z ) , GLshort ( w ) )
#		void  glVertex4sv( const GLshort * ( v ) )
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutSwapBuffers
# DESCRIÇÃO: Promove a troca do buffer secundário (atual) e seu conteúdo para se tornar o conteúdo do buffer de frente.
# PARÂMETROS: Void
# RETORNO: Void
# PROTÓTIPO: void glutSwapBuffers(void)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutTimerFunc
# DESCRIÇÃO: Registra um tempo de retorno a ser acionado em um número especificado de milisegundos.
# PARÂMETROS: Milissegundos tipo unsigned int, ponteiro a função do tipo void (*func)(int value) e o tempo de retorno .
# RETORNO: Void
# PROTÓTIPO: void glutTimerFunc(unsigned int msecs,void (*func)(int value), int value)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutInitContextVersion
# DESCRIÇÃO: Utilizada para definir a versão de contexto do OpenGL. Lembrando que esta função não faz parte do GLUT
# PARÂMETROS: Numeração da versão, por exemplo, versão x.y, definiremos como glutInitContextVersion(x,y);
# RETORNO: Void
# PROTÓTIPO: void glutInitContextVersion(int num1, int num2);
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutInitDisplayMode
# DESCRIÇÃO: Define um modo de display inicial.
# PARÂMETROS: Variável modo (Modo de exibição). Permite as seguintes máscaras: GLUT_RGBA, GLUT_RGB, GLUT_INDEX, GLUT_SINGLE,
#		GLUT_DOUBLE, GLUT_ACCUM, GLUT_ALPHA, GLUT_DEPTH, GLUT_STENCIL, GLUT_MULTISAMPLE, GLUT_STEREO e  GLUT_LUMINANCE.
# RETORNO: Void
# PROTÓTIPO: void glutInitDisplayMode(unsigned int mode);
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutInitWindowSize
# DESCRIÇÃO: Define o tamanho inicial da janela.
# PARÂMETROS: Variáveis inteiras largura e altura (width e height) em pixels.
# RETORNO: Void
# PROTÓTIPO: void glutInitWindowSize(int width, int height);
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutCreateWindow
# DESCRIÇÃO: Cria uma nova janela.
# PARÂMETROS: Uma variável nome (ponteiro a char), que vai ser o nome da janela criada.
# RETORNO: O valor retornado é um identificador inteiro pequeno exclusivo para a janela. O intervalo de identificadores alocados
#		começa em um. 
# PROTÓTIPO: int glutCreateWindow(char *name);
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutDisplayFunc
# DESCRIÇÃO: Define um display de retorno para a janela atual.
# PARÂMETROS: Uma função com retorno e parâmetro void.
# RETORNO: Void
# PROTÓTIPO: void glutDisplayFunc(void (*func)(void));
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutMainLoop
# DESCRIÇÃO: Faz os eventos GLUT entrarem em processo de loop.
# PARÂMETROS: Void
# RETORNO: Void
# PROTÓTIPO: void glutMainLoop(void);
###############################################################################################################################

## A partir do tutorial-02:

###############################################################################################################################
# FUNÇÃO: glOrtho
# DESCRIÇÃO: Multiplica a matriz atual por uma matriz ortográfica (2D) com os valores right, left, bottom, top, near e far.
# PARÂMETROS: Coordenadas para os planos de corte vertical esquerdo e direito (left, right);
#		Coordenadas para os planos de corte horizontal superior e inferior (bottom, top);
#		A distância para os planos de corte de profundidade mais próximo e afastado (nearVal, farVal).
# RETORNO: Void
# PROTÓTIPO: glOrtho(GLdouble(left), GLdouble(right), GLdouble(bottom), GLdouble(top), GLdouble(nearVal), GLdouble(farVal));
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glTranslate
# DESCRIÇÃO: Multiplica a matriz atual por uma matriz de translação.
# PARÂMETROS: Coordenadas x, y e z do vetor de translação.
# RETORNO: Void
# PROTÓTIPO:  glTranslate()
#		Formas do comando:
#		 glTranslated(GLdouble(x), GLdouble(y), GLdouble(z));
#		 glTranslatef(GLfloat(x), GLfloat(y), GLfloat(z));
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glColor
# DESCRIÇÃO: Especifica a cor atual
# PARÂMETROS: Valores red, green, blue e alpha.
# RETORNO: Void
# PROTÓTIPO:  glColor(*args)
#		Formas do comando:
#		void glColor3b( GLbyte ( red ) , GLbyte ( green ) , GLbyte ( blue ) );
#		void glColor3bv( const GLbyte * ( v ) );
#		void glColor3d( GLdouble ( red ) , GLdouble ( green ) , GLdouble ( blue ) );
#		void glColor3dv( const GLdouble * ( v ) );
#		void glColor3f( GLfloat ( red ) , GLfloat ( green ) , GLfloat ( blue ) );
#		void glColor3fv( const GLfloat * ( v ) );
#		void glColor3i( GLint ( red ) , GLint ( green ) , GLint ( blue ) );
#		void glColor3iv( const GLint * ( v ) );
#		void glColor3s( GLshort ( red ) , GLshort ( green ) , GLshort ( blue ) );
#		void glColor3sv( const GLshort * ( v ) );
#		void glColor3ub( GLubyte ( red ) , GLubyte ( green ) , GLubyte ( blue ) );
#		void glColor3ubv( const GLubyte * ( v ) );
#		void glColor3ui( GLuint ( red ) , GLuint ( green ) , GLuint ( blue ) );
#		void glColor3uiv( const GLuint * ( v ) );
#		void glColor3us( GLushort ( red ) , GLushort ( green ) , GLushort ( blue ) );
#		void glColor3usv( const GLushort * ( v ) );
#		void glColor4b( GLbyte ( red ) , GLbyte ( green ) , GLbyte ( blue ) , GLbyte ( alpha ) );
#		void glColor4bv( const GLbyte * ( v ) );
#		void glColor4d( GLdouble ( red ) , GLdouble ( green ) , GLdouble ( blue ) , GLdouble ( alpha ) );
#		void glColor4dv( const GLdouble * ( v ) );
#		void glColor4f( GLfloat ( red ) , GLfloat ( green ) , GLfloat ( blue ) , GLfloat ( alpha ) );
#		void glColor4fv( const GLfloat * ( v ) );
#		void glColor4i( GLint ( red ) , GLint ( green ) , GLint ( blue ) , GLint ( alpha ) );
#		void glColor4iv( const GLint * ( v ) );
#		void glColor4s( GLshort ( red ) , GLshort ( green ) , GLshort ( blue ) , GLshort ( alpha ) );
#		void glColor4sv( const GLshort * ( v ) );
#		void glColor4ub( GLubyte ( red ) , GLubyte ( green ) , GLubyte ( blue ) , GLubyte ( alpha ) );
#		void glColor4ubv( const GLubyte * ( v ) );
#		void glColor4ui( GLuint ( red ) , GLuint ( green ) , GLuint ( blue ) , GLuint ( alpha ) );
#		void glColor4uiv( const GLuint * ( v ) );
#		void glColor4us( GLushort ( red ) , GLushort ( green ) , GLushort ( blue ) , GLushort ( alpha ) );
#		void glColor4usv( const GLushort * ( v ) );
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: handleKeys
# DESCRIÇÃO: Essa função pega um valor ASCII de uma tecla pressionada e a posição atual do mouse. Ela simplesmente alterna a
#		flag boleana quando a tecla é pressionada.
# PARÂMETROS: Valor da tecla pressionada (key) e a coordenada x e y da posição do mouse.
# RETORNO: Void
# PROTÓTIPO: void handleKeys(unsigned char key,int x,int y);
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutKeyboardFunc
# DESCRIÇÃO: Especifica a tecla de retorno do teclado para a janela atual.
# PARÂMETROS: A nova função de retorno do teclado.
# RETORNO: Void
# PROTÓTIPO: void glutKeyboardFunc(void (*func)(unsigned char key,int x, int y));
###############################################################################################################################

## A partir do tutorial-03:

###############################################################################################################################
# FUNÇÃO: glViewport
# DESCRIÇÃO: Define um modo de exibição de janela (viewport).
# PARÂMETROS: x e y: especificam o canto inferior esquerdo do retângulo da janela de visualização em pixels. Valor inicial (0,0)
#		width e height: especificam a largura e altura da viewport.
# RETORNO: Void
# PROTÓTIPO: glViewport( GLint ( x ) , GLint ( y ) , GLsizei ( width ) , GLsizei ( height ) );
###############################################################################################################################

## A partir do tutorial-04:

###############################################################################################################################
# FUNÇÃO: glPushMatrix
# DESCRIÇÃO: Salva uma cópia da matriz atual e insere em uma pilha para esta ser utilizada mais tarde. Importante lembrar que
#		a pilha de matrizes não é infinita. Inserindo matrizes demais na pilha o programa irá retornar um erro de
#		GL_STACK_OVERFLOW da função glGetError().
# PARÂMETROS: Void
# RETORNO: Void
# PROTÓTIPO:  void glPushMatrix((void))
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glPopMatrix
# DESCRIÇÃO: Retira a matriz padrão antiga da pilha de matrizes e mescla com a matriz atual.
# PARÂMETROS: Void
# RETORNO: Void
# PROTÓTIPO:  void glPopMatrix((void))
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glutPostRedisplay
# DESCRIÇÃO: Marca que janela atual precisa ser recarregada.
# PARÂMETROS: Void
# RETORNO: Void
# PROTÓTIPO:  void glutPostRedisplay(void)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: ord
# DESCRIÇÃO: Retorna o código ASCII daquele caractere
# PARÂMETROS: Um caractere qualquer(char)
# RETORNO: O código ASCII correspondente àquele caractere.
# PROTÓTIPO:  int ord(char)
###############################################################################################################################

## A partir do tutorial-05:

###############################################################################################################################
# FUNÇÃO: glDeleteTextures
# DESCRIÇÃO: Deleta uma quantidade definida de texturas.
# PARÂMETROS: O número de texturas a serem deletadas e o array de texturas que serão deletadas.
# RETORNO: Void
# PROTÓTIPO: void glDeleteTextures(GLsizei(n), const GLuint *(textures))
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glGenTextures
# DESCRIÇÃO: Gera os nomes de uma quantidade determinada de texturas.
# PARÂMETROS: O número de nomes de texturas a serem gerados e o array de texturas a serem nomeadas.
# RETORNO: Void
# PROTÓTIPO: void glGenTextures(GLsizei(n), GLuint * (textures)) 
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glBindTexture
# DESCRIÇÃO: Vincula uma textura nomeada a uma textura padrão da biblioteca.
# PARÂMETROS: O destino para o qual a textura será vinculada e o nome da textura. As texturas padrão podem ser: GL_TEXTURE_1D,
#		GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP,
#		GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_BUFFER, GL_TEXTURE_2D_MULTISAMPLE ou GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
# RETORNO: Void
# PROTÓTIPO: void glBindTexture(GLenum(target), GLuint(texture))
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glTexImage
# DESCRIÇÃO: Especifica uma imagem de textura bidimensional.
# PARÂMETROS: - A textura padrão a ser vinculada (GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY,
#		GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X,
#		GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
#		GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z ou GL_PROXY_TEXTURE_CUBE_MAP);
#		- O nível de detalhe;
#		- O número de componentes coloridos na textura;
#		- A altura, largura e borda da imagem;
#		- O formato dos dados de pixel (GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER,
#		GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT,
#		GL_DEPTH_STENCIL);
#		- O tipo de dado dos dados de pixel (GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT,
#		GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV,
#		GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV,
#		GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2 e GL_UNSIGNED_INT_2_10_10_10_REV.);
#		- Um ponteiro para os dados da imagem na memória.
# RETORNO: Void
# PROTÓTIPO: void glTexImageX(GLenum (target), GLint (level), GLint (internalFormat), GLsizei(width), GLsizei(height),
#		GLint(border), GLenum (format), GLenum (type), const GLvoid *(data))
#		
#		Variações da função:
#		O valor X pode ser: 2D, 2Df, 2Di, 2Ds, 2Dui, 2Dus. Só havendo diferença entre os tipos de dados aceitos.
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glTexParameter
# DESCRIÇÃO: Define os parâmetros da textura.
# PARÂMETROS: - (target) A textura de destino que pode ser: GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY,
#		GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP;
#		- (pname) O nome simbólico de um parâmetro de textura de valor único, pode ser: GL_DEPTH_STENCIL_TEXTURE_MODE,
#		GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER,
#		GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R,
#		GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T ou
#		GL_TEXTURE_WRAP_R;
#		- (param ou params) Um valor para pname ou um ponteiro para um array onde os valores de pneme estão guardados.
# RETORNO: Void
# PROTÓTIPO: void  glTexParameterX(GLenum (target), GLenum (pname), const X_type * (params))
#		Variações da função:
#		O valor de X_type pode ser: const GLint *, const GLuint *, GLfloat, const GLfloat *, GLint, const GLint *.
#		O valor X pode ser: Iiv, Iuiv, f, fv, i, iv. Respectivamente em relação a X_type.
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: glEnable
# DESCRIÇÃO: Habilida uma textura.
# PARÂMETROS: Uma constante simbólica indicando uma capacidade GL e o índice para desabilitar.
# RETORNO: Void
# PROTÓTIPO: void glEnable(GLenum(cap)) ou void glEnablei(GLenum(cap), GLuint(index))
###############################################################################################################################

## A partir do tutorial-06:

###############################################################################################################################
# FUNÇÃO: glPixelStorei
# DESCRIÇÃO: Define modos de armazenamento de pixels.
# PARÂMETROS: (pname) Especifica o nome simbólico do parâmetro a ser definido, pode ser: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST,
#		GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES ou GL_PACK_ALIGNMENT.
#		GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS,
#		GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES ou GL_UNPACK_ALIGNMENT.
#		(param) especifica o valor que pname está definido.
# RETORNO: Void
# PROTÓTIPO: void glPixelStoreX(GLenum(pname), X_type(param))
#		Variações da função:
#		O valor de X pode ser: f ou i;
#		O valor de X_type pode ser: GLfloat ou GLint. Respectivamente em relação a X.
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: open
# DESCRIÇÃO: Lê uma imagem de um arquivo.
# PARÂMETROS: O caminho para o arquivo e o modo de carregamento (se for usado deve ser 'r').
# RETORNO: Um objeto do tipo imagem.
# PROTÓTIPO: PIL.Image.open(file,mode='r')
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: close
# DESCRIÇÃO: Retira a imagem da memória.
# PARÂMETROS: Void
# RETORNO: Void
# PROTÓTIPO: Image.close(void)
###############################################################################################################################

###############################################################################################################################
# FUNÇÃO: tobytes
# DESCRIÇÃO: Retorna a imagem como um objeto de bytes
# PARÂMETROS: Qual codificador usar (O padrão é usar o codificador padrão "raw") e argumentos extras para o codificador.
# RETORNO: Um objeto de bytes.
# PROTÓTIPO: Image.tobytes(encoder_name='raw', *args)
###############################################################################################################################