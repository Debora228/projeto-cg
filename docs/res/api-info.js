function get_info_api() {
    return [
        { "Parâmetros": "void", "Protótipo": "bool initGL(void)", "Descrição": "Inicializa recursos de inicialização do OpenGL, como por exemplo, a definição da cor de limpeza.", "Função": "initGL", "Retorno": "bool" },
        { "Parâmetros": "void", "Protótipo": "void render(void)", "Descrição": "Função onde serão renderizados todos os objetos que serão trabalhados.", "Função": "render", "Retorno": "void" },
        { "Parâmetros": "val - Tempo de retorno", "Protótipo": "void runMainLoop(int val)", "Descrição": "Quando chamamos essa função, ele irá executar as funções do loop principal e definir uma chamada de volta para executar-se novamente. Quando o callback éexecutado, ele irá executar as funções de loop principal e chamar-se novamente em um 60 de segundo. Então, o que esse loop de retorno faz égarantir que as funções do loop principal sejam chamadas a cada 60\u00ba de segundo para nos dar uma taxa de quadros de 60 quadros por segundo.", "Função": "runMainLoop", "Retorno": "void" },
        { "Parâmetros": "Variável mode (Especifica qual pilha de matriz éo destino para operações de matriz subsequentes.) Valores aceitos: GL_MODELVIEW, GL_PROJECTION e GL_TEXTURE. Sendo que o valor inicial éGL_MODELVIEW.", "Protótipo": "void glMatrixMode(GLenum(mode))", "Descrição": "Especifica qual éa matriz atual.", "Função": "glMatrixMode", "Retorno": "void" },
        { "Parâmetros": "void", "Protótipo": "void glLoadIdentity(void)", "Descrição": "Substitui a matriz atual pela matriz identidade.", "Função": "glLoadIdentity", "Retorno": "void" },
        { "Parâmetros": "Variáveis red, green, blue e alpha.", "Protótipo": "void glClearColor(GLfloat(red), GLfloat(green), GLfloat(blue), GLfloat(alpha))", "Descrição": "Especifica valores vermelho, verde, azul e alfa usados  para a inicialização do buffer de cores. Os valores iniciais são todos iguais a 0.", "Função": "glClearColor", "Retorno": "void" },
        { "Parâmetros": "void", "Protótipo": "GLenum glGetError(void)", "Descrição": "Retorna uma intormação de erro. A cada erro detectado éatribuído um código numérico e um nome simbólico. Quando ocorre um erro, o sinalizador de erro édefinido para o valor de código de erro apropriado.", "Função": "glGetError", "Retorno": "Valor da flag de erro do tipo GLenum." },
        { "Parâmetros": "Máscaras (tipo GLbitfield) que indicam os buffers a serem limpos. As três máscaras são: GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT e GL_STENCIL_BUFFER_BIT.", "Protótipo": "void glClear(GLbitfield mask)", "Descrição": "Limpa os buffers para valores predefinidos por glClearDepth ou glClearStencil.", "Função": "glClear", "Retorno": "void" },
        { "Parâmetros": "Variável mode (Especifica os tipos primitivos que serão criados a partir dos vértices presentes entre o glBegin e o subsequente glEnd) Constantes aceitas: GL_POINTS, GL_LINES, GL_LINE_STRIP, GL_LINE_LOOP, GL_TRIANGLES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN, GL_QUADS, GL_QUAD_STRIP e GL_POLYGON.", "Protótipo": "void glBegin(GLenum(mode))", "Descrição": "Delimita os vértices de um tipo primitivo ou um grupo de tipos primitivos.", "Função": "glBegin", "Retorno": "void" },
        { "Parâmetros": "Coordenadas x,y,z e w do vértice. Nem todos os parâmetros estão presentes em todas as formas do comando.", "Protótipo": "void glVertex(*args)", "Descrição": "Especifica um vértice.", "Função": "glVertex", "Retorno": "void" },
        { "Parâmetros": "void", "Protótipo": "void glutSwapBuffers(void)", "Descrição": "Promove a troca do buffer secundário (atual) e seu conteúdo para se tornar o conteúdo do buffer de frente.", "Função": "glutSwapBuffers", "Retorno": "void" },
        { "Parâmetros": "Milissegundos tipo unsigned int, ponteiro a função do tipo void (*func)(int value) e o tempo de retorno.", "Protótipo": "void glutTimerFunc(unsigned int msecs,void (*func)(int value), int value)", "Descrição": "Registra um tempo de retorno a ser acionado em um número especificado de milisegundos.", "Função": "glutTimerFunc", "Retorno": "void" },
        { "Parâmetros": "Numeração da versão, por exemplo, versão x.y, definiremos como glutInitContextVersion(x,y).", "Protótipo": "void glutInitContextVersion(int num1, int num2)", "Descrição": "Utilizada para definir a versão de contexto do OpenGL. Lembrando que esta função não faz parte do GLUT.", "Função": "glutInitContextVersion", "Retorno": "void" },
        { "Parâmetros": "Variável modo (Modo de exibição). Permite as seguintes máscaras: GLUT_RGBA, GLUT_RGB, GLUT_INDEX, GLUT_SINGLE, GLUT_DOUBLE, GLUT_ACCUM, GLUT_ALPHA, GLUT_DEPTH, GLUT_STENCIL, GLUT_MULTISAMPLE, GLUT_STEREO e  GLUT_LUMINANCE.", "Protótipo": "void glutInitDisplayMode(unsigned int mode)", "Descrição": "Define um modo de display inicial.", "Função": "glutInitDisplayMode", "Retorno": "void" },
        { "Parâmetros": "Variáveis inteiras largura e altura (width e height) em pixels.", "Protótipo": "void glutInitWindowSize(int width, int height)", "Descrição": "Define o tamanho inicial da janela.", "Função": "glutInitWindowSize", "Retorno": "void" },
        { "Parâmetros": "Uma variável nome (ponteiro a char), que vai ser o nome da janela criada.", "Protótipo": "int glutCreateWindow(char *name)", "Descrição": "Cria uma nova janela", "Função": "glutCreateWindow", "Retorno": "O valor retornado éum identificador inteiro pequeno exclusivo para a janela. O intervalo de identificadores alocados começa em um. " },
        { "Parâmetros": "Uma função com retorno e parâmetro void.", "Protótipo": "void glutDisplayFunc(void (*func)(void))", "Descrição": "Define um display de retorno para a janela atual.", "Função": "glutDisplayFunc", "Retorno": "void" },
        { "Parâmetros": "void", "Protótipo": "void glutMainLoop(void)", "Descrição": "Faz os eventos GLUT entrarem em processo de loop.", "Função": "glutMainLoop", "Retorno": "void" },
        { "Parâmetros": "void", "Protótipo": "void glEnd(void)", "Descrição": "Especifica que os vértices serão enviados e renderiza as figuras.", "Função": "glEnd", "Retorno": "void" },
        { "Parâmetros": "Coordenadas para os planos de corte vertical esquerdo e direito (left, right);Coordenadas para os planos de corte horizontal superior e inferior (bottom, top);A distância para os planos de corte de profundidade mais próximo e afastado (nearVal, farVal).", "Protótipo": "void glOrtho(GLdouble(left), GLdouble(right), GLdouble(bottom), GLdouble(top), GLdouble(nearVal), GLdouble(farVal))", "Descrição": "Multiplica a matriz atual por uma matriz ortográfica (2D) com os valores right, left, bottom, top, near e far.", "Função": "glOrtho", "Retorno": "void" },
        { "Parâmetros": "Coordenadas x, y e z do vetor de translação.", "Protótipo": "void glTranslate(args)", "Descrição": "Multiplica a matriz atual por uma matriz de translação.", "Função": "glTranslate", "Retorno": "void" },
        { "Parâmetros": "Valores red, green, blue e alpha.", "Protótipo": "glColor(*args)", "Descrição": "Especifica a cor atual.", "Função": "glColor", "Retorno": "void" },
        { "Parâmetros": "Valor da tecla pressionada (key) e a coordenada x e y da posição do mouse.", "Protótipo": "void handleKeys(unsigned char key,int x,int y)", "Descrição": "Essa função pega um valor ASCII de uma tecla pressionada e a posição atual do mouse. Ela simplesmente alterna a flag boleana quando a tecla épressionada.", "Função": "handleKeys", "Retorno": "void" },
        { "Parâmetros": "A nova função de retorno do teclado.", "Protótipo": "void glutKeyboardFunc(void (*func)(unsigned char key,int x, int y))", "Descrição": "Especifica a tecla de retorno do teclado para a janela atual.", "Função": "glutKeyboardFunc", "Retorno": "void" },
        { "Parâmetros": "x e y: especificam o canto inferior esquerdo do retângulo da janela de visualização em pixels. Valor inicial (0,0) width e height: especificam a largura e altura da viewport.", "Protótipo": "void glViewport(GLint(x), GLint(y), GLsizei(width), GLsizei(height))", "Descrição": "Define um modo de exibição de janela (viewport).", "Função": "glViewport", "Retorno": "void" },
        { "Parâmetros": "void", "Protótipo": "void glPushMatrix((void))", "Descrição": "Salva uma cópia da matriz atual e insere em uma pilha para esta ser utilizada mais tarde. Importante lembrar que a pilha de matrizes não éinfinita. Inserindo matrizes demais na pilha o programa irá retornar um erro de GL_STACK_OVERFLOW da função glGetError().", "Função": "glPushMatrix", "Retorno": "void" },
        { "Parâmetros": "void", "Protótipo": "void glPopMatrix((void))", "Descrição": "Retira a matriz padrão antiga da pilha de matrizes e mescla com a matriz atual.", "Função": "glPopMatrix", "Retorno": "void" },
        { "Parâmetros": "void", "Protótipo": "void glutPostRedisplay(void)", "Descrição": "Marca que janela atual precisa ser recarregada.", "Função": "glutPostRedisplay", "Retorno": "void" },
        { "Parâmetros": "Um caractere qualquer(char).", "Protótipo": "int ord(char)", "Descrição": "Retorna o código ASCII daquele caractere.", "Função": "ord", "Retorno": "O código ASCII correspondente àquele caractere." },
        { "Parâmetros": "O número de texturas a serem deletadas e o array de texturas que serão deletadas.", "Protótipo": "void glDeleteTextures(GLsizei(n), const GLuint *(textures))", "Descrição": "Deleta uma quantidade definida de texturas.", "Função": "glDeleteTextures", "Retorno": "void" },
        { "Parâmetros": "O número de nomes de texturas a serem gerados e o array de texturas a serem nomeadas.", "Protótipo": "void glGenTextures(GLsizei(n), GLuint * (textures)) ", "Descrição": "Gera os nomes de uma quantidade determinada de texturas.", "Função": "glGenTextures", "Retorno": "void" },
        { "Parâmetros": "O destino para o qual a textura será vinculada e o nome da textura. As texturas padrão podem ser: GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_BUFFER, GL_TEXTURE_2D_MULTISAMPLE ou GL_TEXTURE_2D_MULTISAMPLE_ARRAY.", "Protótipo": "void glBindTexture(GLenum(target), GLuint(texture))", "Descrição": "Vincula uma textura nomeada a uma textura padrão da biblioteca.", "Função": "glBindTexture", "Retorno": "void" },
        { "Variações da Função": "O valor X pode ser: 2D, 2Df, 2Di, 2Ds, 2Dui, 2Dus. Só havendo diferença entre os tipos de dados aceitos.", "Parâmetros": "A textura padrão a ser vinculada (GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D, GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE, GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X, GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y, GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z, GL_TEXTURE_CUBE_MAP_NEGATIVE_Z ou GL_PROXY_TEXTURE_CUBE_MAP);- O nível de detalhe;- O número de componentes coloridos na textura;- A altura, largura e borda da imagem;- O formato dos dados de pixel (GL_RED, GL_RG, GL_RGB, GL_BGR, GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER, GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL);- O tipo de dado dos dados de pixel (GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT, GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2, GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV, GL_UNSIGNED_INT_10_10_10_2 e GL_UNSIGNED_INT_2_10_10_10_REV.);- Um ponteiro para os dados da imagem na memória.", "Protótipo": "void glTexImageX(GLenum (target), GLint (level), GLint (internalFormat), GLsizei(width), GLsizei(height), GLint(border), GLenum (format), GLenum (type), const GLvoid *(data))", "Retorno": "void", "Descrição": "Especifica uma imagem de textura bidimensional.", "Função": "glTexImage" },
        { "Variações da Função": "O valor de X_type pode ser: const GLint *, const GLuint *, GLfloat, const GLfloat *, GLint, const GLint *.O valor X pode ser: Iiv, Iuiv, f, fv, i, iv. Respectivamente em relação a X_type.", "Parâmetros": "- (target) A textura de destino que pode ser: GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE, or GL_TEXTURE_CUBE_MAP;- (pname) O nome simbólico de um parâmetro de textura de valor único, pode ser: GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC, GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER, GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL, GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A, GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T ou GL_TEXTURE_WRAP_R;- (param ou params) Um valor para pname ou um ponteiro para um array onde os valores de pneme estão guardados.", "Protótipo": "void  glTexParameterX(GLenum (target), GLenum (pname), const X_type * (params))", "Retorno": "void", "Descrição": "Define os parâmetros da textura.", "Função": "glTexParameter" },
        { "Parâmetros": "Uma constante simbólica indicando uma capacidade GL e o índice para desabilitar.", "Protótipo": "void glEnable(GLenum(cap)) ou void glEnablei(GLenum(cap), GLuint(index))", "Descrição": "Habilida uma textura.", "Função": "glEnable", "Retorno": "void" },
        { "Variações da Função": "O valor de X pode ser: f ou i;O valor de X_type pode ser: GLfloat ou GLint. Respectivamente em relação a X.", "Parâmetros": "(pname) Especifica o nome simbólico do parâmetro a ser definido, pode ser: GL_PACK_SWAP_BYTES, GL_PACK_LSB_FIRST, GL_PACK_ROW_LENGTH, GL_PACK_IMAGE_HEIGHT, GL_PACK_SKIP_PIXELS, GL_PACK_SKIP_ROWS, GL_PACK_SKIP_IMAGES ou GL_PACK_ALIGNMENT. GL_UNPACK_SWAP_BYTES, GL_UNPACK_LSB_FIRST, GL_UNPACK_ROW_LENGTH, GL_UNPACK_IMAGE_HEIGHT, GL_UNPACK_SKIP_PIXELS, GL_UNPACK_SKIP_ROWS, GL_UNPACK_SKIP_IMAGES ou GL_UNPACK_ALIGNMENT.(param) especifica o valor que pname está definido.", "Protótipo": "void glPixelStoreX(GLenum(pname), X_type(param))", "Retorno": "void", "Descrição": "Define modos de armazenamento de pixels.", "Função": "glPixelStore" },
        { "Parâmetros": "O caminho para o arquivo e o modo de carregamento (se for usado deve ser 'r').", "Protótipo": "PIL.Image.open(file,mode='r')", "Descrição": "Lê uma imagem de um arquivo.", "Função": "open", "Retorno": "Um objeto do tipo imagem." },
        { "Parâmetros": "void", "Protótipo": "void Image.close(void)", "Descrição": "Retira a imagem da memória.", "Função": "close", "Retorno": "void" },
        { "Parâmetros": "Qual codificador usar (O padrão é usar o codificador padrão 'raw') e argumentos extras para o codificador.", "Protótipo": "Image.tobytes(encoder_name='raw', *args)", "Descrição": "Retorna a imagem como um objeto de bytes.", "Função": "tobyte", "Retorno": "Um objeto de bytes." }
    ];
}

// Caso tenha variação usar essa linha
// 
// ,{"Variações da Função": "", "Parâmetros": "", "Protótipo": "", "Retorno": "", "Descrição": "", "Função": ""}
// 
// Caso não tenha variação usar essa linha:
// 
// ,{"Parâmetros": "", "Protótipo": "", "Retorno": "", "Descrição": "", "Função": ""}